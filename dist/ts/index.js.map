{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/ts/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,0BAA0B,CAAA;AAoBtD,MAAM,CAAC,KAAK,UAAU,GAAG,CAAC,OAAmB;IAC5C,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAA;IAE3B,IAAI,OAAO,MAAM,KAAK,QAAQ;QAAE,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAA;IAEtD,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;IAE/B,MAAM,EACL,OAAO,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,GAC9B,GAAG,MAAM,WAAW,CAAa,MAAM,EAAE;QACzC,GAAG,EAAE;YACJ,mEAAmE;YACnE,wBAAwB;YACxB,KAAK,CAAC,GAAW,EAAE,IAAY,EAAE,IAAY,EAAE,MAAc;gBAC5D,OAAO,CAAC,GAAG,CACV,QAAQ,CAAC,GAAG,IAAI,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,EAC5C,SAAS,CAAC,IAAI,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,IAAI,EAChD,SAAS,IAAI,IAAI,EACjB,QAAQ,MAAM,IAAI,CAClB,CAAA;YACF,CAAC;SACD;QACD,OAAO,EAAE;YACR,GAAG,CAAC,GAAW;gBACd,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,IAAI,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,CAAC,CAAA;YACxD,CAAC;SACD;KACD,CAAC,CAAA;IAEF,MAAM,GAAG,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;IAC7B,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,GAAG,GAAG,KAAK,CAAC,CAAA;IAE7C,MAAM,MAAM,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;IAEhC,IAAI,EAAE,CAAA;IAEN,MAAM,IAAI,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;IAC9B,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,IAAI,GAAG,MAAM,CAAC,CAAA;AAC/C,CAAC","sourcesContent":["import { instantiate } from '@lume/as-loader/index.js'\n\n// TODO this should probalbly be an interface with class to\ntype GlasModule = {\n\tmain(): void\n}\n\ntype ModuleSource = string | Parameters<typeof instantiate>[0]\n\ntype RunOptions = {\n\tmodule: ModuleSource // path to Wasm module file\n}\n\n// FIXME The type for the `url` property of `import.meta` is missing.\ndeclare global {\n\tinterface ImportMeta {\n\t\turl: string\n\t}\n}\n\nexport async function run(options: RunOptions) {\n\tlet module = options.module\n\n\tif (typeof module === 'string') module = fetch(module)\n\n\tconst start = performance.now()\n\n\tconst {\n\t\texports: { main, __getString },\n\t} = await instantiate<GlasModule>(module, {\n\t\tenv: {\n\t\t\t// this is called by `assert()`ions in the AssemblyScript std libs.\n\t\t\t// Useful for debugging.\n\t\t\tabort(msg: number, file: number, line: number, column: number) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t`msg: ${(msg && __getString(msg)) || msg}\\n`,\n\t\t\t\t\t`file: ${(file && __getString(file)) || file}\\n`,\n\t\t\t\t\t`line: ${line}\\n`,\n\t\t\t\t\t`col: ${column}\\n`\n\t\t\t\t)\n\t\t\t},\n\t\t},\n\t\tconsole: {\n\t\t\tlog(msg: number) {\n\t\t\t\tconsole.log(`msg: ${(msg && __getString(msg)) || msg}`)\n\t\t\t},\n\t\t},\n\t})\n\n\tconst end = performance.now()\n\tconsole.log('Module load time:', end - start)\n\n\tconst start2 = performance.now()\n\n\tmain()\n\n\tconst end2 = performance.now()\n\tconsole.log('Module run time:', end2 - start2)\n}\n"]}